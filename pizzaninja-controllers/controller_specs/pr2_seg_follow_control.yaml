#
# Copyright (C) 2015 Georg Bartels <georg.bartels@cs.uni-bremen.de>
#
# This file is part of giskard.
#
# giskard is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

scope:
  # definition of some nice short-cuts
  - unit_x: {vector3: [1, 0, 0]}
  - unit_y: {vector3: [0, 1, 0]}
  - unit_z: {vector3: [0, 0, 1]}
  - identity_rotation: {axis-angle: [unit_x, 0]} 
  - zero_vec: {vector3: [0, 0, 0]}


  # definition of joint input variables
  - torso_lift_joint: {input-var: 0}
  - l_shoulder_pan_joint: {input-var: 1}
  - l_shoulder_lift_joint: {input-var: 2}
  - l_upper_arm_roll_joint: {input-var: 3}
  - l_elbow_flex_joint: {input-var: 4}
  - l_forearm_roll_joint: {input-var: 5}
  - l_wrist_flex_joint: {input-var: 6}
  - l_wrist_roll_joint: {input-var: 7}

  - start_x: {input-var: 8}
  - start_y: {input-var: 9}
  - start_z: {input-var: 10}
  - end_x: {input-var: 11}
  - end_y: {input-var: 12}
  - end_z: {input-var: 13}

  # segment-related vectors
  - seg_start: {vector3: [start_x, start_y, start_z]}
  - seg_end: {vector3: [end_x, end_y, end_z]}
  - seg_vec: {vector-sub: [seg_end, seg_start]}
  - seg_len: {vector-norm: seg_vec}
  - seg_vrt: {vector3: [0, 0, 1]}
  - seg_fwd: {scale-vector: [{double-div: [1.0, seg_len]}, seg_vec]}
  - mrk_fwd: {vector-add: [seg_end, seg_fwd]}
  - mrk_vrt: {vector-add: [seg_end, seg_vrt]}


  # definition of joint transforms
  - torso_lift:
      frame: [identity_rotation, {vector3: [-0.05, 0, {double-add: [0.739675, torso_lift_joint]}]}]
  - l_shoulder_pan:
      frame: [{axis-angle: [unit_z, l_shoulder_pan_joint]}, {vector3: [0.0, 0.188, 0.0]}]
  - l_shoulder_lift:
      frame: [{axis-angle: [unit_y, l_shoulder_lift_joint]}, {vector3: [0.1, 0, 0]}]
  - l_upper_arm_roll:
      frame: [{axis-angle: [unit_x, l_upper_arm_roll_joint]}, {vector3: [0, 0, 0]}]
  - l_elbow_flex:
      frame: [{axis-angle: [unit_y, l_elbow_flex_joint]}, {vector3: [0.4, 0, 0]}]
  - l_forearm_roll:
      frame: [{axis-angle: [unit_x, l_forearm_roll_joint]}, {vector3: [0, 0, 0]}]
  - l_wrist_flex:
      frame: [{axis-angle: [unit_y, l_wrist_flex_joint]}, {vector3: [0.321, 0, 0]}]
  - l_wrist_roll:
      frame: [{axis-angle: [unit_x, l_wrist_roll_joint]}, {vector3: [0, 0, 0]}]
  - l_tool_frame:
      frame: [identity_rotation, {vector3: [0.18, 0, 0]}]
  - l_tool_fwd:
      frame: [identity_rotation, unit_x]
  - l_tool_vrt:
      frame: [identity_rotation, unit_z]


  # defintion of entire FK, goal, and control law
  - pr2_fk:
      frame-mul:
      - torso_lift
      - l_shoulder_pan
      - l_shoulder_lift
      - l_upper_arm_roll
      - l_elbow_flex
      - l_forearm_roll
      - l_wrist_flex
      - l_wrist_roll
      - l_tool_frame
  - pr2_fk_pos: {origin-of: pr2_fk}
  - pr2_fk_error_vector: {vector-sub: [seg_end, pr2_fk_pos]}
  - pr2_fk_error: {vector-norm: pr2_fk_error_vector}
  - pr2_fk_control_law: {double-mul: [-1.0, pr2_fk_error]}

  - pr2_tl_fwd: {frame-mul: [pr2_fk, l_tool_fwd]}
  - tool_fwd: {origin-of: pr2_tl_fwd}
  - pr2_tl_vrt: {frame-mul: [pr2_fk, l_tool_vrt]}
  - tool_vrt: {origin-of: pr2_tl_vrt}
  - erro_x: {vector-norm: {vector-sub: [mrk_fwd, tool_fwd]}}
  - erro_z: {vector-norm: {vector-sub: [mrk_vrt, tool_vrt]}}
  - erro_x_control_law: {double-mul: [-1.0, erro_x]}
  - erro_z_control_law: {double-mul: [-1.0, erro_z]}

  - tool_vs_seg: {vector-sub: [pr2_fk_pos, seg_start]}
  - tool_along_seg: {scale-vector: [{vector-dot: [seg_fwd, tool_vs_seg]}, seg_fwd]}
  - from_seg_dif: {vector-sub: [tool_vs_seg, tool_along_seg]}
  - erro_s: {vector-norm: from_seg_dif}
  - erro_s_control_law: {double-mul: [-1.0, erro_s]}

soft-constraints:
  - soft-constraint: [pr2_fk_control_law, pr2_fk_control_law, 10.0, pr2_fk_error]
  - soft-constraint: [erro_x_control_law, erro_x_control_law, 10.0, erro_x]
  - soft-constraint: [erro_z_control_law, erro_z_control_law, 10.0, erro_z]
  - soft-constraint: [erro_s_control_law, erro_s_control_law, 10.0, erro_s]



controllable-constraints:
  - controllable-constraint: [-0.1, 0.1, 10.0, 0]
  - controllable-constraint: [-0.3, 0.3, 1.0, 1]
  - controllable-constraint: [-0.3, 0.3, 1.0, 2]
  - controllable-constraint: [-0.3, 0.3, 1.0, 3]
  - controllable-constraint: [-0.3, 0.3, 1.0, 4]
  - controllable-constraint: [-0.3, 0.3, 1.0, 5]
  - controllable-constraint: [-0.3, 0.3, 1.0, 6]
  - controllable-constraint: [-0.3, 0.3, 1.0, 7]


hard-constraints:
  - hard-constraint:
      - {double-sub: [0.0115, torso_lift_joint]}
      - {double-sub: [0.325, torso_lift_joint]}
      - torso_lift_joint
  - hard-constraint:
      - {double-sub: [-0.5646, l_shoulder_pan_joint]}
      - {double-sub: [2.1353, l_shoulder_pan_joint]}
      - l_shoulder_pan_joint
  - hard-constraint:
      - {double-sub: [-0.3536, l_shoulder_lift_joint]}
      - {double-sub: [1.2963, l_shoulder_lift_joint]}
      -  l_shoulder_lift_joint
  - hard-constraint:
      - {double-sub: [-0.65, l_upper_arm_roll_joint]}
      - {double-sub: [3.75, l_upper_arm_roll_joint]}
      - l_upper_arm_roll_joint
  - hard-constraint:
      - {double-sub: [-2.1213, l_elbow_flex_joint]}
      - {double-sub: [-0.15, l_elbow_flex_joint]}
      - l_elbow_flex_joint
  - hard-constraint:
      - {double-sub: [-2.0, l_wrist_flex_joint]}
      - {double-sub: [-0.1, l_wrist_flex_joint]}
      - l_wrist_flex_joint

